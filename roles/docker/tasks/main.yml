---
# Docker role: detect presence, optionally install, then verify/test conditionally

# Detect if Docker is already installed
- name: Detect if Docker CLI exists
  ansible.builtin.command: docker --version
  register: docker_cli_check
  changed_when: false
  failed_when: false

- name: Set docker_installed fact
  ansible.builtin.set_fact:
    docker_installed: "{{ docker_cli_check.rc == 0 }}"

# Detect if Docker Compose v2 is available (docker compose)
- name: Detect Docker Compose v2
  ansible.builtin.command: docker compose version
  register: compose_check
  changed_when: false
  failed_when: false

- name: Set docker_compose_installed fact
  ansible.builtin.set_fact:
    docker_compose_installed: "{{ compose_check.rc == 0 }}"

# Install Docker Engine via official script and ensure service running
- name: Install and enable Docker (when requested)
  when: install_docker | default(false) | bool
  block:
    - name: Ensure curl is available to fetch Docker script
      ansible.builtin.package:
        name: curl
        state: present

    - name: Download official Docker install script
      ansible.builtin.get_url:
        url: https://get.docker.com
        dest: /tmp/get-docker.sh
        mode: '0755'

    - name: Run Docker install script
      ansible.builtin.command: /tmp/get-docker.sh
      args:
        creates: /usr/bin/docker

    - name: Ensure Docker service is enabled and started
      ansible.builtin.service:
        name: docker
        enabled: true
        state: started

    - name: Add admin user to docker group
      ansible.builtin.user:
        name: "{{ admin_username }}"
        groups: docker
        append: true

# Install Docker Compose v2 (CLI plugin) when requested
- name: Install Docker Compose v2 (CLI plugin) on Linux
  when: install_docker_compose | default(true) | bool
  block:
    - name: Detect latest compose plugin version (static)
      ansible.builtin.set_fact:
        docker_compose_v2_version: "v2.27.1"

    - name: Create plugin directory
      ansible.builtin.file:
        path: /usr/lib/docker/cli-plugins
        state: directory
        mode: '0755'

    - name: Download docker-compose plugin
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_v2_version }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        dest: /usr/lib/docker/cli-plugins/docker-compose
        mode: '0755'

# Verify Docker installation only if requested and Docker is present or being installed
- name: Verify Docker installation
  when:
    - docker_verify_installation | default(true) | bool
    - (install_docker | default(false) | bool) or (docker_installed | default(false) | bool)
  block:
    - name: Show docker version
      ansible.builtin.command: docker --version
      register: docker_version
      changed_when: false

    - name: Debug docker version
      ansible.builtin.debug:
        var: docker_version.stdout

# Run hello-world only if requested and Docker is present or being installed
- name: Run hello-world container test
  when:
    - docker_run_hello_world_test | default(true) | bool
    - (install_docker | default(false) | bool) or (docker_installed | default(false) | bool)
  ansible.builtin.command: docker run --rm hello-world
  register: hello_world
  changed_when: false
  failed_when: false

- name: Show hello-world output
  when:
    - docker_run_hello_world_test | default(true) | bool
    - hello_world is defined
  ansible.builtin.debug:
    var: hello_world.stdout

# Minimal docker compose test only if requested and Compose is present or being installed
- name: Minimal docker compose test using Alpine
  when:
    - docker_compose_test | default(true) | bool
    - (install_docker_compose | default(true) | bool) or (docker_compose_installed | default(false) | bool)
  block:
    - name: Create test compose file
      ansible.builtin.copy:
        dest: /tmp/docker-compose.yml
        content: |
          services:
            alpine:
              image: alpine:3
              command: ["/bin/sh", "-c", "echo compose_ok && sleep 1"]
          version: "3.8"
        mode: '0644'
    - name: Run docker compose up
      ansible.builtin.command: docker compose -f /tmp/docker-compose.yml up --remove-orphans --abort-on-container-exit
      register: compose_run
      changed_when: false
      failed_when: false
    - name: Show compose output
      ansible.builtin.debug:
        var: compose_run.stdout
